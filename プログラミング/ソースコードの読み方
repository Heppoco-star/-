■ソースコードの読み方
・動的にソースコードを追う。
＞デバッガなどを使って、実行時の動きを追う方法。

・静的にソースコードを追う
＞ソースコード自体を読んで追う方法。プログラムの動作を予想する。

①動的にソースコードを読む　→　②静的にソースコードを読む　が良いとされる。
実際の動作が先にわかっていたほうが、コード読解の予想がつきやすい。

■静的なコードの読み方
・ドキュメントを読む
仕様書、設計書、コード規約などの充実したドキュメント、優しい人に囲まれた環境は活用する。

・メモを取る
フローチャート、クラス関係図、関数呼び出し関係図、データ構造図、コードの行番号とその当該処理など、
メモを取っておく。

・ツールのショートカットを使って読む
IDEやテキストエディタなどのツールを使う場合、ツールのショートカットは使えるようにしておく。

・ディレクトリ構造を読む
どういう方針でディレクトリが分割されているか見て把握する。
それぞれのモジュールがどういう関係にあるのか確かめる。
そのプログラムがどのよう分割され組み立てられているのか、概要を知る。

・ファイル構成を読む
ファイル名含め、ファイルの中に入っている関数も併せて、どういう方針でファイルが分割されているかを見る。

・システムの各機能の流れを書いてみる
自分が調べたい箇所に関係するシステムの全体の流れについて、図に起こしてみる。

・略語の調査
わかりにくい略語はリストアップして、早めに調べる。
※対象プログラムの分野で有名な略語は説明なしで使われている。

・関数の呼び出し関係を把握する・関数を読む
関数同士がどのようにつながっているかを把握する。
関数の動作、内容を理解する。

・データ構造を知る
どんなデータが入出力されて、どう変化していくのかに着目する。

・プログラミング言語やフレームワークの設計パターンを知っておく
書くプログラミング言語で使用される定石や公式を、知識として蓄えておく。

■動的なソースコードの読み方
＞デバッガツールを使う

・プログラムを動かしてみる
メジャーなプログラミング言語なら、IDEなどの開発環境には、たいていデバック実行・ステップ実行ができるようになっている

・デバッグツール(デバッガ)の使い方を知る

・好きに操作して動かしてみる
デバッグは、自分の中の仮説を検証する行為。
自分の推測と実際の処理動作は正しいのか、推測と実際のずれはどこにあるのかを考えながらやっていく。
・処理の途中で値を変えてみたらどうなるか
・自分の見たいところでコードを見るために、条件付けして止める
・フィルターをかける
・REPLで確認する
・インすペクとする
・監視　　など

